(function () {
  'use strict';

  /**
   * @namespace Prefs
   * @private
   * @description Utility methods for storing/retrieving preferences
   */
  var Prefs = function () {

    var CONFIG_KEY = 'niftyPrefs';
    var defaults = {
      'arrowStyle': 'arrow',
      'bgImage': 1,
      'expose': 0,
      'darkMode': 0,
      'wallpaper': 'default'
    };
    var config = null;

    var getConfig = function getConfig() {
      if (!config) {
        var storedConfig = JSON.parse(localStorage.getItem(CONFIG_KEY));

        if (storedConfig) {
          config = $.extend({}, defaults, storedConfig);
        } else {
          config = defaults;
        }

        localStorage.setItem(CONFIG_KEY, JSON.stringify(config));
      }

      return config;
    };
    /**
     * Retrieve preference key as a boolean value
     * @memberof   Prefs
     *
     * @param      {string}   key     The key
     * @return     {boolean}  True for positive integer or truthy string
     */


    var getBool = function getBool(key) {
      var value = get(key);
      return truthy(value);
    };
    /**
     * Determine truthiness of value
     *
     * @param      {any}      value   The value: boolean, integer, or string
     * @return     {boolean}  determined value
     */


    var truthy = function truthy(value) {
      if (typeof value === 'boolean') {
        return value;
      }

      if (Number(value)) {
        return Boolean(Number(value));
      } else {
        if (/(y(es)?|true)/i.test(value)) {
          return true;
        }

        return false;
      }
    };
    /**
     * Set a preference value
     * @memberof   Prefs
     *
     * @param      {string}  key     The config item's key
     * @param      {string}  value   Value to set for key
     */


    var set = function set(key, value) {
      config = get();
      config[key] = value;
      localStorage.setItem(CONFIG_KEY, JSON.stringify(config));
    };
    /**
     * Retrive the raw preference for a key
     * @memberof   Prefs
     *
     * @param      {string}  key     The config item's key
     * @return     {string}  raw string from preferences, not decoded or JSONified
     */


    var get = function get(key) {
      var _config = getConfig();

      if (_config && key) {
        if (_config.hasOwnProperty(key)) {
          return config[key];
        } else {
          return null;
        }
      } else {
        return _config;
      }
    };

    var Prefs = {
      config: config,
      set: set,
      get: get,
      getBool: getBool,
      truthy: truthy
    };
    return Prefs;
  }();

  /**
   * @namespace Callout
   * @private
   * @memberof  Nifty
   * @description Methods for adding callouts to items
   */

  var Callout = function () {
    /**
     * Sets the arrow callout
     * @memberof   Callout
     *
     * @param      {boolean}  bool    Add or remove arrow
     * @param      {element}   el     DOM element or jQuery object, applies to all .arrow if empty
     * @return     {boolean}  Result
     */
    var setArrow = function setArrow(bool, el) {
      if (!el && !bool) {
        $('.arrow').each(function (i, n) {
          setArrow(false, $(n));
        });
        return;
      }

      if (!(el instanceof jQuery)) {
        el = $(el);
      }

      if (el.get(0).tagName !== 'LI') {
        el = el.parents('li').first();
      }

      if (bool) {
        setArrow(false);
        setShortcut(false);
        var style = Prefs.get('arrowStyle') || 'arrow';
        var direction = el.find('ul').length ? 'left' : 'right';
        $('.clicked').removeClass('clicked');
        el.addClass('arrow arrow-' + style + ' clicked ' + direction).append('<b><i></i></b>');
        el.parents('li').addClass('clicked');
      } else {
        el.removeClass('arrow arrow-arrow arrow-circle').find('b').remove();
      }
    };
    /**
     * Toggles the arrow callout
     * @memberof   Callout
     *
     * @param      {jquery}   el      jQuery object, all .arrow if empty
     * @return     {boolean}  Result
     */


    var toggleArrow = function toggleArrow(el) {
      if (!el) {
        setArrow(false);
        return;
      }

      if (!(el instanceof jQuery)) {
        el = $(el);
      }

      if (el.hasClass('arrow')) {
        setArrow(false, el);
      } else {
        setArrow(false);
        setShortcut(false);
        setArrow(true, el);
      }
    };
    /**
     * Sets the shortcut callout
     * @memberof   Callout
     *
     * @param      {boolean}  bool    Add or remove shortcut callout
     * @param      {element}   el     DOM element or jQuery object containing shortcut,
     *                                applies to all .shortcut-callout if empty
     * @return     {boolean}  Result
     */


    var setShortcut = function setShortcut(bool, el) {
      if (!el && !bool) {
        $('.shortcut-callout').each(function (i, n) {
          setShortcut(false, $(n));
        });
        return;
      }

      if (!(el instanceof jQuery)) {
        el = $(el);
      }

      if (el.get(0).tagName !== 'LI') {
        el = el.parents('li').first();
      }

      if (bool) {
        setShortcut(false);
        setArrow(false);
        $('.clicked').removeClass('clicked');
        el.addClass('clicked').find('.shortcut').addClass('shortcut-callout');
        el.parents('li').addClass('clicked');
      } else {
        el.find('.shortcut').removeClass('shortcut-callout');
      }
    };
    /**
     * Toggles the shortcut callout
     * @memberof   Callout
     *
     * @param      {jquery}   el      jQuery object, all .arrow if empty
     * @return     {boolean}  Result
     */


    var toggleShortcut = function toggleShortcut(el) {
      if (!el) {
        setShortcut(false);
        return;
      }

      if (!(el instanceof jQuery)) {
        el = $(el);
      }

      if (el.has('.shortcut-callout').length) {
        setShortcut(false, el);
      } else {
        setShortcut(false);
        setShortcut(true, el);
      }
    };
    /**
     * Toggles a checkmark on the clicked menu item.
     * @memberof   Callout
     * @param      {jquery}   el      jQuery object, all .arrow if empty.
     * @return     {boolean}  Result
     */


    var toggleCheckmark = function toggleCheckmark(el) {
      if (!(el instanceof jQuery)) {
        el = $(el);
      }

      if (el.hasClass('checked')) {
        el.removeClass('checked');
      } else {
        el.addClass('checked');
      }

      return true;
    };
    /**
    * Sets the style of the callout arrow
    * @memberof   Callout
    * @param      {string}  style    'circle' or 'arrow'
    */


    var setArrowStyle = function setArrowStyle(style) {
      var newStyle = 'arrow';

      if (style && style === 'circle') {
        newStyle = 'circle';
        $('.arrow-arrow').removeClass('arrow-arrow').addClass('arrow-circle');
      } else {
        $('.arrow-circle').removeClass('arrow-circle').addClass('arrow-arrow');
      }

      Prefs.set('arrowStyle', newStyle);
    };
    /**
     * Toggles arrow style between circle and arrow.
     * @memberof   Callout
     */


    var toggleArrowStyle = function toggleArrowStyle() {
      var newStyle;
      var current = Prefs.get('arrowStyle');

      if (current === 'circle') {
        newStyle = 'arrow';
        $('#arrowStyle', '.controls').text('Arrow style: Arrow');
      } else {
        newStyle = 'circle';
        $('#arrowStyle', '.controls').text('Arrow style: Circle');
      }

      setArrowStyle(newStyle);
    };

    return {
      setArrow: setArrow,
      setArrowStyle: setArrowStyle,
      toggleArrowStyle: toggleArrowStyle,
      toggleArrow: toggleArrow,
      toggleCheckmark: toggleCheckmark,
      setShortcut: setShortcut,
      toggleShortcut: toggleShortcut
    };
  }();

  /**
   * @namespace Nifty.util
   * @private
   * @memberof  Nifty
   * @description DOM/interface utilities
   */

  var Util = function () {
    /**
     * Clear all active clicks (menu items held in place)
     * @memberof   Nifty.util
     *
     * @param      {boolean}  persist  The help menu gets a special class to keep
     *                                 it open while other menus are active, even
     *                                 when it's not hovered. Setting this to true
     *                                 removes that class as well.
     */
    var clearClicks = function clearClicks(persist) {
      $('li.callout').removeClass('callout');
      $('.clicked').removeClass('clicked');
      $('.last').removeClass('last');
      Callout.setArrow(false);
      Callout.setShortcut(false);

      if (persist) {
        $('.persist').removeClass('persist');
      }
    };
    /**
     * Sets the wallpaper image to use when bgImage is enabled
     * @memberof   Nifty.util
     * @param      {string}  url    URL for background image
     */


    var setWallpaper = function setWallpaper(url) {
      Prefs.set('wallpaper', url);
      loadWallpaper();
    };
    /**
     * Add a style rule for the defined wallpaper
     * @memberof   Nifty.util
     * @private
     * @param      {string}  url    URL for background image
     */


    var loadWallpaper = function loadWallpaper() {
      var url = Prefs.get('wallpaper');

      if (!url || url === 'default') {
        if (Prefs.getBool('darkMode')) {
          url = 'images/darkbackground.jpg';
        } else {
          url = 'images/background.jpg';
        }
      }

      addStyleRule('body.bgimage {background-image: url(' + url + ')}');
    };
    /**
     * Add a style rule to main stylesheet
     * @private
     * @memberof Nifty.util
     */


    var addStyleRule = function addStyleRule(rule) {
      var sheet = function () {
        var style = document.createElement("style");
        style.appendChild(document.createTextNode(""));
        document.head.appendChild(style);
        return style.sheet;
      }();

      sheet.insertRule(rule);
    };
    /**
     * Sets the background image on or off. Use the boolean paramater to
     * determine which.
     * @memberof   Nifty.util
     * @param      {boolean}  bool    true turns background image on,
     *                                false for off
     */


    var setBG = function setBG(bool) {
      var $body = $('body');

      if (bool) {
        $body.addClass('bgimage');
        Prefs.set('bgImage', 1);
        loadWallpaper();
      } else {
        $body.removeClass('bgimage');
        Prefs.set('bgImage', 0);
      }
    };
    /**
     * Toggle background image
     * @memberof   Nifty.util
     */


    var toggleBG = function toggleBG() {
      var $body = $('body');

      if ($body.hasClass('bgimage')) {
        setBG(false);
      } else {
        setBG(true);
      }
    };
    /**
     * Toggle Dark Mode
     * @memberof   Nifty.util
     */


    var toggleDarkMode = function toggleDarkMode() {
      var test = $('body').hasClass('dark');

      if (test) {
        setDarkMode(false);
      } else {
        setDarkMode(true);
      }
    };
    /**
     * Set Dark Mode
     * @memberof   Nifty.util
     * @param {boolean} [bool=true] Dark Mode on or off
     */


    var setDarkMode = function setDarkMode() {
      var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var $body = $('body');

      if (!bool) {
        $body.removeClass('dark');
        Prefs.set('darkMode', 0);
      } else {
        $body.addClass('dark');
        Prefs.set('darkMode', 1);
      }
    };
    /**
     * Force Expose on or off. Use the boolean paramater to determine which.
     * @memberof   Nifty.util
     * @param      {boolean}  [bool=true]    true turns Expose on, false for off
     */


    var setExpose = function setExpose(bool) {
      var $body = $('body');

      if (bool) {
        $body.addClass('expose');
        Prefs.set('expose', 1);
      } else {
        $body.removeClass('expose');
        Prefs.set('expose', 0);
      }
    };
    /**
     * Toggle Expose
     * @memberof   Nifty.util
     */


    var toggleExpose = function toggleExpose() {
      var $body = $('body');

      if ($body.hasClass('expose')) {
        setExpose(false);
      } else {
        setExpose(true);
      }
    };

    return {
      setDarkMode: setDarkMode,
      toggleDarkMode: toggleDarkMode,
      setExpose: setExpose,
      toggleExpose: toggleExpose,
      setBG: setBG,
      setWallpaper: setWallpaper,
      loadWallpaper: loadWallpaper,
      toggleBG: toggleBG,
      clearClicks: clearClicks
    };
  }();

  /**
   * @namespace Nifty.handlers
   * @private
   * @memberof  Nifty
   * @description Event handlers
   */

  var Handler = function () {
    /**
     * live search for the help menu, function ~ macOS
     * @private
     * @memberof   Nifty.handlers
     *
     * @param      {event}    e       Event
     */
    var liveSearch = function liveSearch(e) {
      var $field = $('.helpsearch input'),
          string = $field.val(),
          shouldScroll = false;

      if (e.code === 'Escape') {
        e.preventDefault();
        $field.val('').blur();
        Util.clearClicks(true);
        return true;
      }

      if (e.code === 'Enter' || e.code === 'Return') {
        e.preventDefault();
        $('.persist').removeClass('persist');
        shouldScroll = true; // return true;
      }

      if (string.length < 2) {
        Util.clearClicks(false);
        return true;
      }

      var $item = find(string);

      if ($item) {
        Util.clearClicks(false);
        $item.parents('li').addClass('clicked');
        $item.addClass('clicked last');

        if (shouldScroll) {
          $field.blur();
          $item.get(0).scrollIntoView({
            behavior: "smooth",
            block: "end",
            inline: "center"
          });
        }
      } else {
        Util.clearClicks(false);
      }

      return true;
    };
    /**
     * click handler for menu items
     * @private
     * @memberof   Nifty.handlers
     * @param      {event}   e       Event
     * @return     {boolean}  continue handling event
     */


    var itemClick = function itemClick(e) {
      e.preventDefault();
      var $this,
          shortcutClicked = false;

      if (e.target.tagName === 'SPAN') {
        $this = $(e.target).closest('li');

        if ($(e.target).hasClass('shortcut')) {
          shortcutClicked = true;
        }
      } else {
        $this = $(e.target);
      }

      if (e.metaKey || e.altKey) {
        if (e.metaKey) {
          Callout.toggleCheckmark($this);
        } else if (e.altKey) {
          if (shortcutClicked) {
            Callout.toggleShortcut($this);
          } else {
            Callout.toggleArrow($this);
          }
        }

        updateStatus();
        return false;
      }

      $('.callout').removeClass('callout');
      $('.persist').removeClass('persist');

      if (e.target.tagName === 'BODY') {
        $('.clicked').removeClass('clicked');
        $('.last').removeClass('last');
        Callout.setArrow(false);
        Callout.setShortcut(false);
      } else {
        if ($this.hasClass('clicked')) {
          if ($this.find('.last').length) {
            Util.clearClicks();
            $this.parents('li').addClass('clicked');
            $this.addClass('clicked last');
          } else {
            $('.last').removeClass('last');

            if ($this.parents('.clicked').length) {
              $this.removeClass('clicked');
              $this.siblings('.clicked').removeClass('clicked');
              $this.parents('.clicked').first().addClass('last');
            } else {
              $('.clicked').removeClass('clicked');
            }

            Callout.setArrow(false);
            Callout.setShortcut(false);
            updateStatus();
          }

          return false;
        } else {
          Callout.setArrow(false);
          Callout.setShortcut(false);
          $('li.clicked').removeClass('clicked');
          $('.last').removeClass('last');
          $this.parents('li').addClass('clicked');

          if (e.altKey) {
            Callout.setArrow(true, $this);
          }

          $this.addClass('clicked last');
        }

        if (e.type === 'dblclick') {
          $this.addClass('callout');

          if (e.shiftKey) {
            $this.parents('.clicked').addClass('callout');
          }
        }
      }

      updateStatus();
      return false;
    };
    /**
     * handler for all clicks within the .controls element
     * @private
     * @memberof   Nifty.handlers
     * @param      {event}   e       Event
     * @return     {boolean}  continue handling event
     */


    var controlsClick = function controlsClick(e) {
      e.preventDefault();
      var $this = e.target;

      switch ($this.id) {
        case 'darkModeToggle':
          Util.toggleDarkMode();
          break;

        case 'exposeToggle':
          Util.toggleExpose();
          break;

        case 'backgroundToggle':
          Util.toggleBG();
          break;

        case 'chooseWallpaper':
          chooseWallpaper();
          break;

        case 'resetWallpaper':
          Util.setWallpaper(false);
          break;

        case 'arrowStyle':
          Util.toggleArrowStyle();
          break;

        default:
          throw 'Element ID unrecognized';
      }

      return false;
    };
    /**
     * Update the status bar
     * @private
     * @memberof   Nifty.handlers
     * @param      {event}   e       Event
     * @return     {boolean}  continue handling event
     */


    var updateStatus = function updateStatus() {
      setTimeout(function () {
        if ($('.last').length) {
          $('body').addClass('locked');
        } else {
          $('body').removeClass('locked');
        }
      }, 50);
      return true;
    };
    /**
     * Allow entry of a url to load as wallpaper
     * @memberof Handlers
     * @private
     */


    var chooseWallpaper = function chooseWallpaper() {
      var url = prompt("Enter URL for background image");
      Prefs.set('wallpaper', url);
      Util.loadWallpaper();
    };
    /**
     * reveal and focus the help search field
     * @memberof   Nifty.handlers
     *
     * @param      {event}    e       Event
     * @return     {boolean}  continue handling event
     */


    var focusSearch = function focusSearch(e) {
      e.preventDefault();
      $('li.callout').removeClass('callout');
      $('.clicked').removeClass('clicked');
      Util.clearClicks();
      var $search = $('.helpsearch').first();
      $search.parents('li').addClass('clicked persist');
      $search.get(0).scrollIntoView({
        behavior: "smooth",
        block: "end",
        inline: "end"
      });
      $('input', $search).focus();
      return false;
    };

    return {
      itemClick: itemClick,
      controlsClick: controlsClick,
      liveSearch: liveSearch,
      focusSearch: focusSearch,
      updateStatus: updateStatus
    };
  }();

  /**
   * @namespace Nifty
   * @private
   * @description Automation API and event handlers
   */

  var Nifty = function () {

    var orderedMenuItemTitles;
    /**
     * Setup function, cache menu items and init preferences
     * @memberof   Nifty
     */

    var init = function init() {
      getOrderedMenuItemTitles();

      if (Prefs.getBool('darkMode')) {
        Util.setDarkMode(true);
      }

      if (Prefs.getBool('expose')) {
        Util.setExpose(true);
      }

      Util.loadWallpaper();

      if (Prefs.getBool('bgImage')) {
        Util.setBG(true);
      }

      Callout.setArrowStyle(Prefs.get('arrowStyle')); // set up handlers

      $('body,li').on('click dblclick', Handler.itemClick); // $('body,li').on('mouseup', Handler.updateStatus);

      $('span', '.controls').on('click', Handler.controlsClick);
      $('.helpsearch input').on('keydown', Handler.liveSearch);
      $('.helpsearch').on('click', Handler.focusSearch);
      $('.helpsearch').on('blur', function () {
        $('.persist').removeClass('persist');
      }); // Load demo overlay if viewed on GitHub

      if (window.location.host === 'ttscoff.github.io') {
        $('body').addClass('demo');
      } // bind some keys


      Mousetrap.bind('shift+/', Handler.focusSearch);
      Mousetrap.bind('shift+d', Util.toggleDarkMode);
      Mousetrap.bind('shift+e', Util.toggleExpose);
    };

    var itemForPath = function itemForPath(path) {
      return $('li').filter(function (i, n) {
        if ($(n).data('path') === path) {
          return true;
        }

        return false;
      }).first();
    };
    /**
     * Case insensitive string match for menu item search. Use / to separate
     * heirarchical menu search items
     * @memberof   Nifty
     * @example  Nifty.find('insert/toc/section')
     *
     * @param      {string}  query   The string to search for
     * @return     {jQuery}  single jQuery element or null
     */


    var find = function find(query) {
      if (/^\s*$/.test(query)) {
        return null;
      }

      query = query.replace(/>/g, "/");
      var titles = getOrderedMenuItemTitles();
      var results = fuzzysort.go(query, titles);

      if (results.length) {
        return itemForPath(results[0].target);
      } else {
        return null;
      }
    };
    /**
     * search for a menu item by string and click
     * @memberof   Nifty
     *
     * @param      {string}   str     The string to search and click
     * @param      {boolean}  force   If false/undefined, clicking a focused item
     *                                will hide it. Pass true to always open the
     *                                item.
     * @return     {null}     Nothing
     */


    var click = function click(str) {
      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (force) {
        Util.clearClicks(true);
      }

      if (!str || /^\s*$/.test(str)) {
        Util.clearClicks(true);
        return;
      }

      var match = find(str);

      if (match) {
        match.click();
        match.get(0).scrollIntoView({
          behavior: "auto",
          block: "end",
          inline: "center"
        });
      }
    };
    /**
     * search for a menu item by string and double-click
     * @memberof   Nifty
     *
     * @param      {string}   str     The string to search and double click
     * @param      {boolean}  force   If false/undefined, clicking a focused item
     *                                will hide it. Pass true to always open the
     *                                item.
     * @return     {null}     Nothing
     */


    var dblClick = function dblClick(str) {
      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (force) {
        Util.clearClicks(true);
      }

      if (!str || /^\s*$/.test(str)) {
        Util.clearClicks(true);
        return;
      }

      var match = find(str);

      if (match) {
        match.dblclick();
        match.get(0).scrollIntoView({
          behavior: "auto",
          block: "end",
          inline: "center"
        });
      }
    };
    /**
     * Get an array of all item tiles with hierarchy
     * @private
     *
     * @return     {array}  The menu item titles.
     */


    var getOrderedMenuItemTitles = function getOrderedMenuItemTitles() {
      if (orderedMenuItemTitles && orderedMenuItemTitles.length > 0) {
        return orderedMenuItemTitles;
      }

      var titles = [];
      $('li').each(function (i, n) {
        var thisTitle = n.innerText.split(/\n/)[0].trim();
        $(n).parents('li').each(function (i, n) {
          if (n.innerText.length) {
            thisTitle = n.innerText.split(/\n/)[0].trim() + "/" + thisTitle;
          }
        });
        $(n).data('path', thisTitle);
        titles.push(thisTitle);
      });
      orderedMenuItemTitles = titles;
      return orderedMenuItemTitles;
    };

    return {
      orderedMenuItemTitles: [],
      init: init,
      click: click,
      dblClick: dblClick,
      find: find
    };
  }();

  /**
   * @namespace NiftyAPI
   * @description Chainable automation API. All chains that affect a menu item
   * should start with a .find('search string') call.
   *
   * @example NiftyAPI.find('file/save').arrow(); // locate File->Save menu item and add an arrow callout
   */

  var NiftyAPI = {
    targetEl: null,

    /**
     * Set multiple display options via a configuration object
     * @param      {Object}  options  object containing settings
     * @example NiftyAPI.config({
     *   'arrowStyle': 'arrow',
     *   'bgImage': true,
     *   'expose': false,
     *   'darkMode': false,
     *   'wallpaper': 'default'
     * })
     */
    config: function config() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var defaults = Prefs.config;
      var config = $.extend({}, defaults, options);
      Util.setDarkMode(Prefs.truthy(config.darkMode));
      Util.setExpose(Prefs.truthy(config.expose));
      Util.setBG(Prefs.truthy(config.bgImage));
      Util.setWallpaper(config.wallpaper);
      Callout.setArrowStyle(config.arrowStyle);
      return this;
    },

    /**
     * Case insensitive string match for menu item search. Use / to separate
     * heirarchical menu search items. This function can be chained for use with
     * other functions.
     * @memberof   NiftyAPI
     * @example
     *   NiftyAPI.find('insert/toc/section')
     * @example
     *   NiftyAPI.find('insert/toc/section').arrow()
     *
     * @param      {string}  str     The string to search for
     * @return     {jQuery}  single jQuery element or null
     */
    find: function find(str) {
      this.targetEl = Nifty.find(str);
      return this;
    },

    /**
     * Clear all clicks, callouts, and arrows
     * @memberof   NiftyAPI
     * @example
     *  NiftyAPI.clear();
     */
    clear: function clear() {
      Util.clearClicks(true);
      return this;
    },

    /**
     * Lock menu item. Removes any existing locks.
     * @memberof   NiftyAPI
     * @example
     *  NiftyAPI.find('file/save').lock();
     */
    lock: function lock() {
      Util.clearClicks(true);
      this.targetEl.click();
      this.targetEl.get(0).scrollIntoView({
        behavior: "auto",
        block: "end",
        inline: "center"
      });
      return this;
    },

    /**
     * Add callout to menu item
     * @memberof   NiftyAPI
     *
     * @param      {boolean}  [bool=true]      Callout on or off (default: true)
     * @param      {boolean}  [recurse=false]  Call out parent items (default:
     *                                         false)
     * @example
     *  NiftyAPI.find('file/open').callout();
     * @example
     *  NiftyAPI.find('file/open').callout(false); // remove callout
     */
    callout: function callout(bool) {
      var recurse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (bool === undefined) {
        bool = true;
      }

      Util.clearClicks(true);
      this.targetEl.dblclick();
      this.targetEl.get(0).scrollIntoView({
        behavior: "auto",
        block: "end",
        inline: "center"
      });

      if (recurse) {
        this.targetEl.parents('.clicked').addClass('callout');
      }

      return this;
    },

    /**
     * Set callout arrow for menu item
     * @memberof   NiftyAPI
     *
     * @param      {boolean}  [bool=true]  Arrow on or off
     * @example
     *  NiftyAPI.find('view/merge').arrow();
     * @example
     *  NiftyAPI.find('view/merge').arrow(false); // remove arrow
     */
    arrow: function arrow(bool) {
      if (bool === undefined) {
        bool = true;
      }

      Callout.setArrow(bool, this.targetEl);
      return this;
    },

    /**
     * Set shortcut callout for menu item
     * @memberof   NiftyAPI
     *
     * @param      {boolean}  [bool=true]  Shortcut callout on or off
     * @example
     *  NiftyAPI.find('file/save').shortcut();
     * @example
     *  NiftyAPI.find('file/save').shortcut(false); // remove arrow
     */
    shortcut: function shortcut(bool) {
      if (bool === undefined) {
        bool = true;
      }

      Callout.setShortcut(bool, this.targetEl);
      return this;
    },

    /**
     * Turn Dark Mode on or off
     * @memberof   NiftyAPI
     *
     * @param      {boolean}  [bool=true]  Dark Mode on or off
     * @example
     *  NiftyAPI.darkMode() // turn dark mode on
     * @example
     *  NiftyAPI.darkMode(false) // turn dark mode off
     */
    darkMode: function darkMode(bool) {
      if (bool === undefined) {
        bool = true;
      }

      Util.setDarkMode(bool);
      return this;
    },

    /**
     * Turn Expose on or off
     * @memberof   NiftyAPI
     *
     * @param      {boolean}  [bool=true]  Expose on or off
     * @example
     *  NiftyAPI.expose(); // turn expose on
     * @example
     *  NiftyAPI.expose(false); // turn expose off
     */
    expose: function expose(bool) {
      if (bool === undefined) {
        bool = true;
      }

      Util.setExpose(bool);
      return this;
    }
  };

  $(function () {
    Nifty.init();
    window.NiftyAPI = NiftyAPI;
  });

}());
